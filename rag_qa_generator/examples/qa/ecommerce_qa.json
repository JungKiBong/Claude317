[
    {
      "difficulty": "easy",
      "question": "모든 고객의 이름과 이메일 주소를 조회하세요.",
      "sql": "SELECT name, email FROM customers;",
      "answer": "고객 테이블에서 모든 고객의 이름과 이메일 주소를 조회한 결과를 반환합니다. 이 쿼리는 고객 테이블의 모든 행에서 name과 email 열만 선택합니다."
    },
    {
      "difficulty": "easy",
      "question": "가격이 50달러 이상인 모든 제품의 이름과 가격을 조회하세요.",
      "sql": "SELECT name, price FROM products WHERE price >= 50;",
      "answer": "제품 테이블에서 가격이 50달러 이상인 모든 제품의 이름과 가격을 반환합니다. 이 쿼리는 WHERE 절을 사용하여 가격이 50 이상인 제품만 필터링합니다."
    },
    {
      "difficulty": "medium",
      "question": "각 카테고리별 제품 수와 평균 가격을 조회하세요.",
      "sql": "SELECT c.name AS category_name, COUNT(p.product_id) AS product_count, AVG(p.price) AS average_price FROM categories c JOIN products p ON c.category_id = p.category_id GROUP BY c.category_id, c.name;",
      "answer": "이 쿼리는 각 카테고리별 제품 수와 평균 가격을 계산합니다. categories와 products 테이블을 조인하고, 카테고리별로 그룹화하여 제품 수(COUNT)와 평균 가격(AVG)을 계산한 결과를 반환합니다."
    },
    {
      "difficulty": "medium",
      "question": "2023년에 가장 많은 주문을 한 상위 5명의 고객 이름과 총 주문 금액을 조회하세요.",
      "sql": "SELECT c.name, SUM(o.total_amount) AS total_spent FROM customers c JOIN orders o ON c.customer_id = o.customer_id WHERE YEAR(o.order_date) = 2023 GROUP BY c.customer_id, c.name ORDER BY total_spent DESC LIMIT 5;",
      "answer": "2023년에 가장 많은 금액을 지출한 상위 5명의 고객 이름과 총 지출액을 보여줍니다. customers와 orders 테이블을 조인하고, 2023년 주문만 필터링한 후, 고객별로 그룹화하여 총 주문 금액을 계산합니다. 그 결과를 총 지출액 기준으로 내림차순 정렬하고 상위 5개만 반환합니다."
    },
    {
      "difficulty": "hard",
      "question": "각 제품 카테고리별로 월별 매출 추이를 조회하고, 전월 대비 매출 증감률도 함께 표시하세요.",
      "sql": "WITH monthly_sales AS (\n  SELECT\n    c.category_id,\n    c.name AS category_name,\n    YEAR(o.order_date) AS year,\n    MONTH(o.order_date) AS month,\n    SUM(oi.quantity * oi.unit_price) AS sales_amount\n  FROM categories c\n  JOIN products p ON c.category_id = p.category_id\n  JOIN order_items oi ON p.product_id = oi.product_id\n  JOIN orders o ON oi.order_id = o.order_id\n  GROUP BY c.category_id, c.name, YEAR(o.order_date), MONTH(o.order_date)\n)\nSELECT\n  m1.category_name,\n  m1.year,\n  m1.month,\n  m1.sales_amount,\n  LAG(m1.sales_amount) OVER (PARTITION BY m1.category_id ORDER BY m1.year, m1.month) AS prev_month_sales,\n  CASE\n    WHEN LAG(m1.sales_amount) OVER (PARTITION BY m1.category_id ORDER BY m1.year, m1.month) IS NULL THEN NULL\n    WHEN LAG(m1.sales_amount) OVER (PARTITION BY m1.category_id ORDER BY m1.year, m1.month) = 0 THEN NULL\n    ELSE (m1.sales_amount - LAG(m1.sales_amount) OVER (PARTITION BY m1.category_id ORDER BY m1.year, m1.month)) / LAG(m1.sales_amount) OVER (PARTITION BY m1.category_id ORDER BY m1.year, m1.month) * 100\n  END AS growth_rate\nFROM monthly_sales m1\nORDER BY m1.category_name, m1.year, m1.month;",
      "answer": "이 쿼리는 각 제품 카테고리별로 월별 매출 추이와 전월 대비 증감률을 보여줍니다. 먼저 CTE(Common Table Expression)를 사용하여 각 카테고리의 월별 매출을 계산합니다. 그런 다음 윈도우 함수 LAG를 사용하여 이전 달의 매출을 가져오고, 현재 달과 이전 달의 매출 차이를 이전 달 매출로 나누어 증감률을 백분율로 계산합니다. 결과는 카테고리, 년, 월 순으로 정렬되어 제공됩니다."
    }
  ]